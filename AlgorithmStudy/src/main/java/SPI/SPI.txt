
1,入口
ExtensionLoader.getExtensionLoader(Protocol.class).getExtension(InjvmProtocol.NAME);
ExtensionLoader.getExtensionLoader(Protocol.class).getAdaptiveExtension();
a,getExtensionLoader
缓存EXTENSION_LOADERS type -> new ExtensionLoader<T>(type)复合操作然后返回
b,new ExtensionLoader(type)
判断type的类型是否为ExtensionFactory.class，是就返回null，否则递归调用getExtensionLoader参数为ExtensionFactory.class

2,
getAdaptiveExtension() @Adaptive注解实现类，不存在动态创建类
getDefaultExtension()  接口@SPI name 指定类
getExtension(String name)  指定实现类

a,加载
META-INF/services/
META-INF/dubbo/
META-INF/dubbo/internal/
文件名和全类名一致的文件
缓存
cachedAdaptiveClass使用@Adapt注解的类
cachedWrapperClasses类的装饰类,通过构造方法参数是当前类接口
cachedActivateClass文件内name对应的类是@Activate注解的类
cachedNames文件内name->clazz
extensionClasses同cachedNames
b,
缓存Class<?> cachedAdaptiveClass存在直接返回


3,createAdaptiveExtensionClass
创建一个激活扩展类
a,动态拼接类文件
b,com.alibaba.dubbo.common.compiler.Compiler compiler = ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.compiler.Compiler.class).getAdaptiveExtension();
SPI返回编译类,Compiler接口有一个@Adaptive实现类AdaptiveCompiler

@SPI("dubbo")
public interface Protocol {
    int getDefaultPort();
    @Adaptive
    <T> Exporter<T> export(Invoker<T> invoker) throws RpcException;
    @Adaptive
    <T> Invoker<T> refer(Class<T> type, URL url) throws RpcException;
    void destroy();
}

只实现@Adaptive注解的方法,调用非@Adaptive报错
package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adpative implements com.alibaba.dubbo.rpc.Protocol {
	public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws java.lang.Class {
		// URL不存在将报错
		String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
		com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
		return extension.refer(arg0, arg1);
	}
	public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) {
		// URL不存在将报错
		com.alibaba.dubbo.common.URL url = arg0.getUrl();
		String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
		com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
		return extension.export(arg0);
	}
}


4,compiler.compile(code, classLoader)
因为AdaptiveCompiler只是装饰类,获取具体实现javassist
a,AdaptiveCompiler类 compiler
-> loader.getDefaultExtension();
-> getExtension(cachedDefaultName)
终于(getAdaptiveExtension() == getExtension(String name))
getDefaultExtension加载META-INF数据只是判断有没有默认实现类
b,getExtension
加载META-INF获取name对应Clazz
c,injectExtension
给当前实例注入数据,然后用装饰类封装后再次注入
ExtensionFactory接口
AdaptiveExtensionFactory的SPI默认实现只是装饰类
SpiExtensionFactory注入SPI数据
SpringExtensionFactory注入Spring的bean数据
d,JavassistCompiler类 compiler.compile(code, classLoader)
默认使用Class反射创建类
如果抛出异常
使用javasisst实现(这里不做具体分析)
这里返回的对象只是一个代理对象Protocol$Adpative





5,调用Protocol@Adpative.refer方法 extName = injvm
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
返回InjvmProtocol




